// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230312013412_UserAttributes")]
    partial class UserAttributes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("Age")
                        .HasColumnType("double precision");

                    b.Property<double>("Bmr")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Tdee")
                        .HasColumnType("double precision");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Domain.Nutrients", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<double?>("Carbohydrates100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbohydratesServing")
                        .HasColumnType("double precision");

                    b.Property<string>("CarbohydratesUnit")
                        .HasColumnType("text");

                    b.Property<double?>("CarbohydratesValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbonFootprintFromKnownIngredients100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbonFootprintFromKnownIngredientsProduct")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbonFootprintFromKnownIngredientsServing")
                        .HasColumnType("double precision");

                    b.Property<double?>("Energy")
                        .HasColumnType("double precision");

                    b.Property<double?>("Energy100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKcal")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKcal100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKcalServing")
                        .HasColumnType("double precision");

                    b.Property<string>("EnergyKcalUnit")
                        .HasColumnType("text");

                    b.Property<double?>("EnergyKcalValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKcalValueComputed")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKj")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKj100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKjServing")
                        .HasColumnType("double precision");

                    b.Property<string>("EnergyKjUnit")
                        .HasColumnType("text");

                    b.Property<double?>("EnergyKjValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyKjValueComputed")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnergyServing")
                        .HasColumnType("double precision");

                    b.Property<string>("EnergyUnit")
                        .HasColumnType("text");

                    b.Property<double?>("EnergyValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fat100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("FatServing")
                        .HasColumnType("double precision");

                    b.Property<string>("FatUnit")
                        .HasColumnType("text");

                    b.Property<double?>("FatValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fiber")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fiber100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("FiberServing")
                        .HasColumnType("double precision");

                    b.Property<string>("FiberUnit")
                        .HasColumnType("text");

                    b.Property<double?>("FiberValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("FruitsVegetablesNutsEstimateFromIngredients100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("FruitsVegetablesNutsEstimateFromIngredientsServing")
                        .HasColumnType("double precision");

                    b.Property<double?>("NovaGroup")
                        .HasColumnType("double precision");

                    b.Property<double?>("NovaGroup100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("NovaGroupServing")
                        .HasColumnType("double precision");

                    b.Property<double?>("NutritionScoreFr")
                        .HasColumnType("double precision");

                    b.Property<double?>("NutritionScoreFr100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("Proteins")
                        .HasColumnType("double precision");

                    b.Property<double?>("Proteins100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProteinsServing")
                        .HasColumnType("double precision");

                    b.Property<string>("ProteinsUnit")
                        .HasColumnType("text");

                    b.Property<double?>("ProteinsValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("Salt")
                        .HasColumnType("double precision");

                    b.Property<double?>("Salt100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("SaltServing")
                        .HasColumnType("double precision");

                    b.Property<string>("SaltUnit")
                        .HasColumnType("text");

                    b.Property<double?>("SaltValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("SaturatedFat")
                        .HasColumnType("double precision");

                    b.Property<double?>("SaturatedFat100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("SaturatedFatServing")
                        .HasColumnType("double precision");

                    b.Property<string>("SaturatedFatUnit")
                        .HasColumnType("text");

                    b.Property<double?>("SaturatedFatValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sodium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sodium100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("SodiumServing")
                        .HasColumnType("double precision");

                    b.Property<string>("SodiumUnit")
                        .HasColumnType("text");

                    b.Property<double?>("SodiumValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sugars")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sugars100G")
                        .HasColumnType("double precision");

                    b.Property<double?>("SugarsServing")
                        .HasColumnType("double precision");

                    b.Property<string>("SugarsUnit")
                        .HasColumnType("text");

                    b.Property<double?>("SugarsValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("Domain.NutritionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<double>("Servings")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("NutritionLog");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("NutrientsId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NutrientsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.NutritionLog", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("NutritionLogs")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.Nutrients", "Nutrients")
                        .WithMany()
                        .HasForeignKey("NutrientsId");

                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Navigation("NutritionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
